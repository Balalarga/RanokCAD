/**
 * Part 2 Challenges
 * - Change the diffuse color of the sphere to be blue
 * - Change the specual color of the sphere to be green
 * - Make one of the lights pulse by having its intensity vary over time
 * - Add a third light to the scene
 */
#version 420

layout(location = 0) in vec2 vUv;

layout(location = 0) out vec4 oColor;

uniform vec2 uResolution = vec2(800, 600);
uniform sampler2D tForwardRendering;
uniform vec3 uCameraPos = vec3(0.0, 0.0, 4.0);
uniform vec3 uCameraDir = vec3(0.0, 0.0, 0.0);// Unknown usage
uniform float uCameraFov = 60;
uniform float uCameraNear = 0.01;
uniform float uCameraFar = 100.0;

const int MAX_MARCHING_STEPS = 1024;
const float EPSILON = 0.0001;
const vec3 DEFAULT_OBJECT_COLOR = vec3(0.3, 0.1, 0.1);

float _rv_Or(float a, float b)
{
	return a + b + sqrt(pow(a, 2) + pow(b, 2.0));
}

float _rv_And(float a, float b)
{
	return a + b - sqrt(pow(a, 2.0) + pow(b, 2.0));
}

/**
 * Signed distance function for a sphere centered at the origin with radius 1.0;
 */
float sphereSDF(vec3 samplePoint) {
    return length(samplePoint) - 1.0;
}

## for Object in Objects
## if existsIn(Object, "Functions")
## for Function in Object.Functions
{{Function.ReturnType}} {{Function.Name}}({% if existsIn(Function, "Args") %}{% for Arg in Function.Args %}{{Arg.Type}} {{Arg.Name}}{% if not loop.is_last %},{% endif %}{% endfor %}{% endif %})
{{Function.Body}}
## endfor
## endif
{{Object.Main.ReturnType}} ObjectFunc{{loop.index}}({% for Arg in Object.Main.Args %}{{Arg.Type}} {{Arg.Name}}{% if Arg.Count != 0 %}[{{Arg.Count}}]{% endif %}{% if not loop.is_last %},{% endif %}{% endfor %})
{{Object.Main.Body}}
## endfor

struct ObjectHit
{
    bool miss;
    vec3 color;
    float depth;
};

/**
 * Signed distance function describing the scene.
 * 
 * Absolute value of the return value indicates the distance to the surface.
 * Sign indicates whether the point is inside or outside the surface,
 * negative indicating inside.
 */
 // Returns color of hitted object
ObjectHit sceneSDF(vec3 samplePoint)
{
    ObjectHit hit = ObjectHit(true, DEFAULT_OBJECT_COLOR, -1);
    //return sphereSDF(samplePoint);
    float dist;
## for Object in Objects
    dist = ObjectFunc{{loop.index}}(float[](samplePoint.x, samplePoint.y, samplePoint.z));
    if (dist > 0)
    {
        hit.miss = false;
## if existsIn(Object, "Color")
        hit.color = vec3({{Object.Color.r}}, {{Object.Color.g}}, {{Object.Color.b}});
## endif
        return hit;
    }
## endfor
    return hit;
}

/**
 * Return the shortest distance from the eyepoint to the scene surface along
 * the marching direction. If no part of the surface is found between start and end,
 * return end.
 * 
 * eye: the eye point, acting as the origin of the ray
 * marchingDirection: the normalized direction to march in
 * start: the starting distance away from the eye
 * end: the max distance away from the ey to march before giving up
 */
ObjectHit shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end) {
    float step = (end - start) / MAX_MARCHING_STEPS;
    ObjectHit hit = ObjectHit(true, DEFAULT_OBJECT_COLOR, start);
    for (int i = 0; i < MAX_MARCHING_STEPS; i++)
    {
        hit = sceneSDF(eye + i * step * marchingDirection);
        if (!hit.miss)
        {
            hit.depth = i * step;
			return hit;
        }
    }
    return hit;
}


/**
 * Return the normalized direction to march in from the eye point for a single pixel.
 * 
 * fieldOfView: vertical field of view in degrees
 * size: resolution of the output image
 * fragCoord: the x,y coordinate of the pixel in the output image
 */
vec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {
    vec2 xy = fragCoord - size / 2.0;
    float z = size.y / tan(radians(fieldOfView) / 2.0);
    return normalize(vec3(xy, -z));
}

/**
 * Using the gradient of the SDF, estimate the normal on the surface at point p.
vec3 estimateNormal(vec3 p) {
    return normalize(vec3(
        sceneSDF(vec3(p.x + EPSILON, p.y, p.z)) - sceneSDF(vec3(p.x - EPSILON, p.y, p.z)),
        sceneSDF(vec3(p.x, p.y + EPSILON, p.z)) - sceneSDF(vec3(p.x, p.y - EPSILON, p.z)),
        sceneSDF(vec3(p.x, p.y, p.z  + EPSILON)) - sceneSDF(vec3(p.x, p.y, p.z - EPSILON))
    ));
}
*/

/**
 * Lighting contribution of a single point light source via Phong illumination.
 * 
 * The vec3 returned is the RGB color of the light's contribution.
 *
 * k_a: Ambient color
 * k_d: Diffuse color
 * k_s: Specular color
 * alpha: Shininess coefficient
 * p: position of point being lit
 * eye: the position of the camera
 * lightPos: the position of the light
 * lightIntensity: color/intensity of the light
 *
 * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description
 */
vec3 phongContribForLight(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye,
                          vec3 lightPos, vec3 lightIntensity) {
    vec3 N = vec3(1);//estimateNormal(p);
    vec3 L = normalize(lightPos - p);
    vec3 V = normalize(eye - p);
    vec3 R = normalize(reflect(-L, N));
    
    float dotLN = dot(L, N);
    float dotRV = dot(R, V);
    
    if (dotLN < 0.0) {
        // Light not visible from this point on the surface
        return vec3(0.0, 0.0, 0.0);
    } 
    
    if (dotRV < 0.0) {
        // Light reflection in opposite direction as viewer, apply only diffuse
        // component
        return lightIntensity * (k_d * dotLN);
    }
    return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, alpha));
}

/**
 * Lighting via Phong illumination.
 * 
 * The vec3 returned is the RGB color of that point after lighting is applied.
 * k_a: Ambient color
 * k_d: Diffuse color
 * k_s: Specular color
 * alpha: Shininess coefficient
 * p: position of point being lit
 * eye: the position of the camera
 *
 * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description
 */
vec3 phongIllumination(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye) {
    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);
    vec3 color = ambientLight * k_a;
    
    vec3 light1Pos = vec3(4.0,
                          2.0,
                          4.0);
    vec3 light1Intensity = vec3(0.4, 0.4, 0.4);
    
    color += phongContribForLight(k_d, k_s, alpha, p, eye,
                                  light1Pos,
                                  light1Intensity);
    
    vec3 light2Pos = vec3(2.0,
                          2.0,
                          2.0);
    vec3 light2Intensity = vec3(0.4, 0.4, 0.4);
    
    color += phongContribForLight(k_d, k_s, alpha, p, eye,
                                  light2Pos,
                                  light2Intensity);
    return color;
}

float rand(vec2 co)
{
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

vec3 myRayDirection(vec2 size, vec2 fragCoord) {
    vec2 xy = fragCoord - size / 2.0;
    float z = size.y / tan(radians(uCameraFov) / 2.0);
    return normalize(vec3(xy, -z));
}

void main()
{
    vec4 fwdColor = texture(tForwardRendering, vUv);
	vec2 uv = gl_FragCoord.xy / uResolution.xy;
    fwdColor = texture(tForwardRendering, uv);

    vec3 dir = myRayDirection(uResolution.xy, gl_FragCoord.xy);
    
    vec3 eye = vec3(uCameraPos.x, uCameraPos.y, -uCameraPos.z);
    ObjectHit hit = shortestDistanceToSurface(eye, dir, uCameraNear, uCameraFar);

    if (hit.miss)
    {
        if (fwdColor.w < 1.0)
            oColor = vec4(fwdColor.xyz, 1.0);
        else
            oColor = vec4(0.1, 0.1, 0.1, 1.0);
		return;
    }


	float invNear = 1/uCameraNear;
	float depth = (1/(hit.depth) - invNear) / (1/uCameraFar - invNear);
    if (depth > fwdColor.w)
    {
        oColor = vec4(fwdColor.xyz, 1.0);
        return;
    }
    oColor = vec4(hit.color, 1.0);

    /* Light model
    // The closest point on the surface to the eyepoint along the view ray
    vec3 p = vec3(1.0);//eye + dist * dir;
    
    vec3 K_a = vec3(0.2, 0.2, 0.2);
    vec3 K_d = vec3(0.7, 0.2, 0.2);
    vec3 K_s = vec3(1.0, 1.0, 1.0);
    float shininess = 10.0;
    
    vec3 color = phongIllumination(K_a, K_d, K_s, shininess, p, eye);
    oColor = vec4(color, 1.0);
    */
}